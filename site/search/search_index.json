{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"imdby imdby is a Python package useful to retrieve and manage the data of the IMDb movie database about movies, person, characters, companies, events and news. Source Link PyPI: https://pypi.org/project/imdby/ Repository: https://github.com/santhoshse7en/imdby/ Documentation: https://santhoshse7en.github.io/imdby_doc/ Main features imdby is a Python package useful to retrieve and manage the data of the IMDb movie database about movies, person, characters, companies, events and news. Sentiment Analysis included for IMDb user reviews. written in Python 3 (compatible with Python 2.7) platform-independent can retrieve data from both the IMDb's web server, or a local copy of the database simple and complete API Installation Whenever possible, please use the latest version from the repository: pip install git+https://github.com/santhoshse7en/imdby But if you want, you can also install the latest release from PyPI: pip install imdby Example Here\u2019s an example that demonstrates how to use imdby: # create an instance of the IMDb class from imdb.imdb import IMDb # create an instance of the IMDb class ia = IMDb() # get a movie cast = ia.full_cast_and_crew('tt4154796') # print the directors of the movie print('Directors:') for director in cast.directors: print(director) # search for a person name people = ia.search_person('Simon Baker') print(people.person_id, people.person_name)","title":"Home"},{"location":"#imdby","text":"imdby is a Python package useful to retrieve and manage the data of the IMDb movie database about movies, person, characters, companies, events and news. Source Link PyPI: https://pypi.org/project/imdby/ Repository: https://github.com/santhoshse7en/imdby/ Documentation: https://santhoshse7en.github.io/imdby_doc/","title":"imdby"},{"location":"#main-features","text":"imdby is a Python package useful to retrieve and manage the data of the IMDb movie database about movies, person, characters, companies, events and news. Sentiment Analysis included for IMDb user reviews. written in Python 3 (compatible with Python 2.7) platform-independent can retrieve data from both the IMDb's web server, or a local copy of the database simple and complete API","title":"Main features"},{"location":"#installation","text":"Whenever possible, please use the latest version from the repository: pip install git+https://github.com/santhoshse7en/imdby But if you want, you can also install the latest release from PyPI: pip install imdby","title":"Installation"},{"location":"#example","text":"Here\u2019s an example that demonstrates how to use imdby: # create an instance of the IMDb class from imdb.imdb import IMDb # create an instance of the IMDb class ia = IMDb() # get a movie cast = ia.full_cast_and_crew('tt4154796') # print the directors of the movie print('Directors:') for director in cast.directors: print(director) # search for a person name people = ia.search_person('Simon Baker') print(people.person_id, people.person_name)","title":"Example"},{"location":"FAQ/","text":"Frequently Asked Questions Q: Is IMDbPY compatible with Python 3? A: Yes. Versions after 6.0 are compatible with Python 3.x, but should also work with Python 2.7. If you need an older, unmaintained, version for Python, see the imdbpy-legacy branch in the repository. Q: Importing the data using the \u2018s3\u2019 method, are the imdbID available? A: Yes! The data from https://datasets.imdbws.com/ contains the original IDs. Q: Importing the data using the old \u2018sql\u2019 method, are the imdbID available? A: No. The old \u2018sql\u2019 method generates sequential imdbIDs that are unrelated to the ones used by the web site. Q: I have an URL (of a movie, person or something else), how can I get a Movie/Person/\u2026 instance? A: Import the imdb.helpers module and use the get_byURL function. Q: I\u2019m writing an interface based on IMDbPY and I have problems handling encoding, chars conversions, replacements of references and so on. A: See the many functions in the imdb.helpers module.","title":"FAQs"},{"location":"FAQ/#frequently-asked-questions","text":"Q: Is IMDbPY compatible with Python 3? A: Yes. Versions after 6.0 are compatible with Python 3.x, but should also work with Python 2.7. If you need an older, unmaintained, version for Python, see the imdbpy-legacy branch in the repository. Q: Importing the data using the \u2018s3\u2019 method, are the imdbID available? A: Yes! The data from https://datasets.imdbws.com/ contains the original IDs. Q: Importing the data using the old \u2018sql\u2019 method, are the imdbID available? A: No. The old \u2018sql\u2019 method generates sequential imdbIDs that are unrelated to the ones used by the web site. Q: I have an URL (of a movie, person or something else), how can I get a Movie/Person/\u2026 instance? A: Import the imdb.helpers module and use the get_byURL function. Q: I\u2019m writing an interface based on IMDbPY and I have problems handling encoding, chars conversions, replacements of references and so on. A: See the many functions in the imdb.helpers module.","title":"Frequently Asked Questions"},{"location":"quick_start/","text":"Quick start The first thing to do is to import imdb and call the imdb.IMDb function to get an access object through which IMDb data can be retrieved: import imdb ia = imdb.IMDb() By default this will fetch the data from the IMDb web server but there are other options. See the access systems document for more information. Searching You can use the search_movie method of the access object to search for movies with a given (or similar) title. For example, to search for movies with titles like \u201cmatrix\u201d: movies = ia.search_movie('matrix') movies[0] Similarly, you can search for people and companies using the search_person and the search_company methods: people = ia.search_person('angelina') people[0] companies = ia.search_company('rko') companies[0] As the examples indicate, the results are lists of Movie, Person, or Company objects. These behave like dictionaries, i.e. they can be queried by giving the key of the data you want to obtain: movies[0]['title'] 'The Matrix' people[0]['name'] 'Angelina Jolie' companies[0]['name'] 'RKO' Movie, person, and company objects have id attributes which -when fetched through the IMDb web server- store the IMDb id of the object: movies[0].movieID '0133093' people[0].personID '0001401' companies[0].companyID '0226417' Retrieving If you know the IMDb id of a movie, you can use the get_movie method to retrieve its data. For example, the movie \u201cThe Untouchables\u201d by Brian De Palma has the id \u201c0094226\u201d: movie = ia.get_movie('0094226') movie Similarly, the get_person and the get_company methods can be used for retrieving Person and Company data: person = ia.get_person('0000206') person['name'] 'Keanu Reeves' person['birth date'] '1964-9-2' company = ia.get_company('0017902') company['name'] 'Pixar Animation Studios' Keywords You can search for keywords similar to the one provided: keywords = ia.search_keyword('dystopia') keywords ['dystopia', 'dystopian-future', ..., 'dystopic-future'] And movies that match a given keyword: movies = ia.get_keyword('dystopia') len(movies) 50 movies[0] Top / bottom movies It\u2019s possible to retrieve the list of top 250 and bottom 100 movies: top = ia.get_top250_movies() top[0] bottom = ia.get_bottom100_movies() bottom[0] The get_top250_tv, get_popular100_movies, get_popular100_movies and get_top250_indian_movies methods are also available. Exceptions Any error related to IMDbPY can be caught by checking for the imdb.IMDbError exception: from imdb import IMDb, IMDbError try: ia = IMDb() people = ia.search_person('Mel Gibson') except IMDbError as e: print(e)","title":"Quick start"},{"location":"usage/","text":"Quickstart The first thing to do is to import imdb and call the imdb.IMDb function to get an access object through which IMDb data can be retrieved: >>> import imdb >>> ia = imdb.IMDb() Searching You can use the search_movie method of the access object to search for movies with a given (or similar) title. For example, to search for movies with titles like \u201cmatrix\u201d: >>> movies = ia.search_movie('endgame') >>> print('Movie ID: %s, Movie Name: %s' % (movies.title_id, movies.title_name)) 'Movie ID: tt4154796, Movie Name: Avengers: Endgame' Similarly, you can search for people and companies using the search_person and the search_company methods: >>> people = ia.search_person('robert downey') >>> print('Person ID: %s, Person Name: %s' % (people.person_id, people.person_name)) 'Person ID: nm0000375, Person Name: Robert Downey Jr.' >>> companies = ia.search_company('rko') >>> print('Company ID: %s, Company Name: %s' % (companies.company_id, companies.company_name)) 'Company ID: co0051941, Company Name: Marvel Studios' As the examples indicate, the results are suggestion of Movie, Person, or Company in order. These behave like multiple choice, i.e. they can be queried by object data you want to obtain from your selection: >>> movies.title_name 'Avengers: Endgame' >>> people.person_name 'Robert Downey Jr.' >>> companies.company_name 'Marvel Studios' Movie, person, and company objects have id attributes which -when fetched through the IMDb web server- store the IMDb id of the object: >>> movies.title_id 'tt4154796' >>> people[0].personID 'nm0000375' >>> companies[0].companyID 'co0051941' Retrieving If you know the IMDb id of a movie, you can use the movie method to retrieve its data. For example, the movie \u201cThe Untouchables\u201d by Brian De Palma has the id \u201ctt4154796\u201d: >>> movie = ia.movie('tt0094226') >>> movie.title 'The Untouchables' Similarly, the get_person and the get_company methods can be used for retrieving Person and Company data: >>> person = ia.person('nm0000206') >>> print('Name: %s, DOB: %s' % (person.title, person.dob)) 'Name: Keanu Reeves, DOB: 1964-9-2' >>> company = ia.company('co0017902') >>> company.name 'Pixar Animation Studios'","title":"Usage"},{"location":"usage/#quickstart","text":"The first thing to do is to import imdb and call the imdb.IMDb function to get an access object through which IMDb data can be retrieved: >>> import imdb >>> ia = imdb.IMDb()","title":"Quickstart"},{"location":"usage/#searching","text":"You can use the search_movie method of the access object to search for movies with a given (or similar) title. For example, to search for movies with titles like \u201cmatrix\u201d: >>> movies = ia.search_movie('endgame') >>> print('Movie ID: %s, Movie Name: %s' % (movies.title_id, movies.title_name)) 'Movie ID: tt4154796, Movie Name: Avengers: Endgame' Similarly, you can search for people and companies using the search_person and the search_company methods: >>> people = ia.search_person('robert downey') >>> print('Person ID: %s, Person Name: %s' % (people.person_id, people.person_name)) 'Person ID: nm0000375, Person Name: Robert Downey Jr.' >>> companies = ia.search_company('rko') >>> print('Company ID: %s, Company Name: %s' % (companies.company_id, companies.company_name)) 'Company ID: co0051941, Company Name: Marvel Studios' As the examples indicate, the results are suggestion of Movie, Person, or Company in order. These behave like multiple choice, i.e. they can be queried by object data you want to obtain from your selection: >>> movies.title_name 'Avengers: Endgame' >>> people.person_name 'Robert Downey Jr.' >>> companies.company_name 'Marvel Studios' Movie, person, and company objects have id attributes which -when fetched through the IMDb web server- store the IMDb id of the object: >>> movies.title_id 'tt4154796' >>> people[0].personID 'nm0000375' >>> companies[0].companyID 'co0051941'","title":"Searching"},{"location":"usage/#retrieving","text":"If you know the IMDb id of a movie, you can use the movie method to retrieve its data. For example, the movie \u201cThe Untouchables\u201d by Brian De Palma has the id \u201ctt4154796\u201d: >>> movie = ia.movie('tt0094226') >>> movie.title 'The Untouchables' Similarly, the get_person and the get_company methods can be used for retrieving Person and Company data: >>> person = ia.person('nm0000206') >>> print('Name: %s, DOB: %s' % (person.title, person.dob)) 'Name: Keanu Reeves, DOB: 1964-9-2' >>> company = ia.company('co0017902') >>> company.name 'Pixar Animation Studios'","title":"Retrieving"}]}